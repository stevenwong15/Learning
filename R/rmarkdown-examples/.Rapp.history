dataset <- cbind(y, scale(x))
pcr.fit <- lm(y ~ ., data = dataset)
dadtaset
dataset
head(dataset)
dataset <- data.frame(cbind(y, scale(x)))
pcr.fit <- pcr(y ~ ., data = dataset, scale = T, validation = 'CV')
pcr.pred <- predict(pcr.fit, x.test, ncomp = 5)
mean((pcr.pred - y.test)^2)
dataset <- scale(cbind(y, x))
pcr.fit <- pcr(y ~ ., data = dataset, validation = 'CV')
dataset <- data.frame(scale(cbind(y, x)))
pcr.fit <- pcr(y ~ ., data = dataset, validation = 'CV')
pcr.pred <- predict(pcr.fit, x.test, ncomp = 5)
mean((pcr.pred - y.test)^2)
dataset <- data.frame(scale(cbind(y, x)))
pcr.fit <- pcr(y ~ ., data = dataset)
pcr.pred <- predict(pcr.fit, x.test, ncomp = 5)
mean((pcr.pred - y.test)^2)
dataset <- data.frame(scale(cbind(y, x)))
pcr.fit <- pcr(y ~ ., data = dataset, scale = TRUE)
pcr.pred <- predict(pcr.fit, x.test, ncomp = 5)
mean((pcr.pred - y.test)^2)
dataset <- cbind(y, x)
pcr.fit <- pcr(y ~ ., data = dataset, scale = TRUE)
pcr.pred <- predict(pcr.fit, x.test, ncomp = 5)
mean((pcr.pred - y.test)^2)
y.text
y.test
head(x.test)
pcr.fit
summary(pcr.fit)
sum(13.736 ,24.53, 32.29, 36.09, 37.32)
dataset <- cbind(y, x)
pcr.fit <- pcr(y ~ ., data = dataset, scale = TRUE)
pcr.pred <- predict(pcr.fit, x.test, ncomp = 5)
mean((pcr.pred - y.test)^2)
dataset <- cbind(y, x)
pcr.fit <- lm(y ~ ., data = dataset)
pcr.pred <- predict(pcr.fit, x.test, ncomp = 5)
mean((pcr.pred - y.test)^2)
head(pcr.pred)
?predict
dataset <- cbind(y, x)
pcr.fit <- lm(y ~ ., data = dataset)
pcr.pred <- predict(pcr.fit, x.test)
mean((pcr.pred - y.test)^2)
pcr.pred <- predict(pcr.fit, x.test, type = 'response')
mean((pcr.pred - y.test)^2)
3.90714/3.65197
dataset <- cbind(y, x)
pcr.fit <- pcr(y ~ ., data = dataset, scale = TRUE)
pcr.pred <- predict(pcr.fit, x.test, ncomp = 5)
pcr.pred <- predict(pcr.fit, x.test, ncomp = 5, type = 'response')
mean((pcr.pred - y.test)^2)
summary(pcr.pred)
pcr.pred
X <- rbind(x, x.test)
pr.out <- prcomp(X, scale = T)
pr.out
names(pr.out)
pr.var <- pr.out$sdev^2
sum(pr.var[1:5]) / sum(pr.var)
head(pr.out)
summary(pr.out)
dim(pr.out)
summary(prout)
summary(pr.out)
head(pr.out)
names(pr.out)
pr.out$center %>% head(20)
pr.out$center
pr.out$scale
pr.out$rotation
dim(x)
dim(pr.out$rotation)
names(pr.out)
Z <- X %*% pr.out$rotation
head(X)
dim(X)
dim(x)
dim(pr.out$rotation)
Z <- X %*% pr.out$rotation
str(X)
search()
install.packages()
installed.packages()
#================================================================================= #
# - installs all the packages in R#
#=================================================================================#
#
packagesList <- (#
  c(#
#
#---------------------------------------------------------------------------------#
# standard packages#
'MASS',  # standard statistical package#
'ElemStatLearn',  # functions and examples from 'ESL'#
'ISLR',  # functions and examples from 'ISL'#
'gcookbook',  # functions and examples from 'R Graphics Cookbook'#
'pryr',  # tools to pry in to R, used with 'Advanced R Programming'#
#
#---------------------------------------------------------------------------------#
# data processing#
'foreign',  # .dbf (read.dbf, read.spss)#
'xlsx',  # .xlsx (read.xlsx)#
'gdata',  # .xls (read.xls)#
'scales',  # allows for $, %, etc.#
'lubridate',  # to allow easier parsing of dates#
#
#---------------------------------------------------------------------------------#
# data manipulation#
'magrittr',  # provides 'pipe'-like operator#
'plyr',  # splitting, applying and combining data#
'data.table',#
'dplyr',  # splitting, applying and combining data, replacing plyr#
'reshape2',  # alternative to reshape(); convert data between wide & long#
'tidyr',  # alternative to reshape2()#
'broom',  # installation: 'devtools); install_github('dgrtwo/broom')#
'abind',  # combines arrays#
#
#---------------------------------------------------------------------------------#
# statistical methods#
#
# math#
'expm',  # matrix exponential#
'Matrix',  # matrix#
#
# plot#
'corrplot',  # correlation plot#
'ROCR',  # # ROCR plot#
#
# methods#
'lasso2',  # the lasso#
'leaps',  # function to find the regression subset#
'class',  # classification#
'boot',  # cross-validation and bootstrap#
'pls',  # PRC#
'glmnet',  # the lasso or elastic-net regularization path#
# 'spline',  # splines#
'gam',  # generalized additive models#
'tree',  # trees#
'randomForest',  # bagging + random forest#
'gbm',  # boosting#
'e1071',  # SVM#
'np',  # kernel smoothing / non-parametric regression#
'PSCBS',  # circular binary segmentation, install the following before#
# source("http://bioconductor.org/biocLite.R")#
# biocLite("DNAcopy")#
'nlme',  # generalized least square'#
'bcp',  # bayesian changepoint model#
#
# distributions#
'evd',  # extreme value distribution#
'mnormt',  # multivariate t-distribution#
'truncnorm',  # truncated normal distribution#
'VGAM',  # Rayleigh distribution#
#
# time series#
'astsa',  # applied statistical time series analysis#
'forecast',  # forecasting functions for time series & linear models#
#
# bayesian#
'bayesm',  # by Peter Rossi, from 'Bayesian Statistics and Marketing'#
'MCMCpack',  # a variant#
#
#---------------------------------------------------------------------------------#
# graphics#
#
# framework#
'ggplot2',  # ggplot2.org/book#
'ggsubplot',  # facilitate embedded plots through ggplot2#
'ggvis',  # web-interactive graphics, used with shiny: ggvis.rstudio.com#
'shiny',  # web-application framework for R: shiny.rstudio.com#
'gridExtra',  # plot multiple ggplot2 plots in a grid#
#
# specific plots#
'gplots',  # a variant#
'igraph',  # network#
'rgl',  # 3D graphics#
'vcd',  # mosaic#
#
# fonts#
'extrafont',#
# load fonts: loadfonts()#
# import all fonts: font_import()#
# list all the fonts: fonts()#
#
#---------------------------------------------------------------------------------#
# string manipulation#
'stringr', #
#
#---------------------------------------------------------------------------------#
# GIS#
'maptools',  # reading and handling spatial objects#
#
#---------------------------------------------------------------------------------#
# markdown#
# 'pandoc#
'knitr', #
'rmarkdown',  # rmarkdown.rstudio.com#
#
#---------------------------------------------------------------------------------#
# SQL#
'DBI',#
'RMySQL',#
#
#---------------------------------------------------------------------------------#
# package development#
'devtools',#
'roxygen2'#
#
  )#
)
packagesList
#================================================================================= #
# - list of packages in R#
#=================================================================================#
#
packagesList <- (#
  c(#
#
#---------------------------------------------------------------------------------#
# standard packages#
'MASS',  # standard statistical package#
'ElemStatLearn',  # functions and examples from 'ESL'#
'ISLR',  # functions and examples from 'ISL'#
'gcookbook',  # functions and examples from 'R Graphics Cookbook'#
'pryr',  # tools to pry in to R, used with 'Advanced R Programming'#
#
#---------------------------------------------------------------------------------#
# data processing#
'foreign',  # .dbf (read.dbf, read.spss)#
'xlsx',  # .xlsx (read.xlsx)#
'gdata',  # .xls (read.xls)#
'scales',  # allows for $, %, etc.#
'lubridate',  # to allow easier parsing of dates#
#
#---------------------------------------------------------------------------------#
# data manipulation#
'magrittr',  # provides 'pipe'-like operator#
'plyr',  # splitting, applying and combining data#
'data.table',#
'dplyr',  # splitting, applying and combining data, replacing plyr#
'reshape2',  # alternative to reshape(); convert data between wide & long#
'tidyr',  # alternative to reshape2()#
'broom',  # installation: 'devtools); install_github('dgrtwo/broom')#
'abind',  # combines arrays#
#
#---------------------------------------------------------------------------------#
# statistical methods#
#
# math#
'expm',  # matrix exponential#
'Matrix',  # matrix#
#
# plot#
'corrplot',  # correlation plot#
'ROCR',  # # ROCR plot#
#
# methods#
'lasso2',  # the lasso#
'leaps',  # function to find the regression subset#
'class',  # classification#
'boot',  # cross-validation and bootstrap#
'pls',  # PRC#
'glmnet',  # the lasso or elastic-net regularization path#
# 'spline',  # splines#
'gam',  # generalized additive models#
'tree',  # trees#
'randomForest',  # bagging + random forest#
'gbm',  # boosting#
'e1071',  # SVM#
'np',  # kernel smoothing / non-parametric regression#
'PSCBS',  # circular binary segmentation, install the following before#
# source("http://bioconductor.org/biocLite.R")#
# biocLite("DNAcopy")#
'nlme',  # generalized least square'#
'bcp',  # bayesian changepoint model#
#
# distributions#
'evd',  # extreme value distribution#
'mnormt',  # multivariate t-distribution#
'truncnorm',  # truncated normal distribution#
'VGAM',  # Rayleigh distribution#
#
# time series#
'astsa',  # applied statistical time series analysis#
'forecast',  # forecasting functions for time series & linear models#
#
# bayesian#
'bayesm',  # by Peter Rossi, from 'Bayesian Statistics and Marketing'#
'MCMCpack',  # a variant#
#
#---------------------------------------------------------------------------------#
# graphics#
#
# framework#
'ggplot2',  # ggplot2.org/book#
'ggsubplot',  # facilitate embedded plots through ggplot2#
'ggvis',  # web-interactive graphics, used with shiny: ggvis.rstudio.com#
'shiny',  # web-application framework for R: shiny.rstudio.com#
'gridExtra',  # plot multiple ggplot2 plots in a grid#
#
# specific plots#
'gplots',  # a variant#
'igraph',  # network#
'rgl',  # 3D graphics#
'vcd',  # mosaic#
#
# fonts#
'extrafont',#
# load fonts: loadfonts()#
# import all fonts: font_import()#
# list all the fonts: fonts()#
#
#---------------------------------------------------------------------------------#
# string manipulation#
'stringr', #
#
#---------------------------------------------------------------------------------#
# GIS#
'maptools',  # reading and handling spatial objects#
#
#---------------------------------------------------------------------------------#
# markdown#
# 'pandoc#
'knitr', #
'rmarkdown',  # rmarkdown.rstudio.com#
#
#---------------------------------------------------------------------------------#
# SQL#
'DBI',#
'RMySQL',#
#
#---------------------------------------------------------------------------------#
# package development#
'devtools',#
'roxygen2'#
#
  )#
)#
#
#================================================================================= #
# - installs all of above in R#
#=================================================================================#
#
for (i in 1:length(packagesList)) {#
    if (!(packagesList[i] %in% rownames(installed.packages()))) { #
        install.packages(packagesList[i]) #
    }#
}
#================================================================================= #
# - list of packages in R#
#=================================================================================#
#
packagesList <- (#
  c(#
#
#---------------------------------------------------------------------------------#
# standard packages#
'MASS',  # standard statistical package#
'ElemStatLearn',  # functions and examples from 'ESL'#
'ISLR',  # functions and examples from 'ISL'#
'gcookbook',  # functions and examples from 'R Graphics Cookbook'#
'pryr',  # tools to pry in to R, used with 'Advanced R Programming'#
#
#---------------------------------------------------------------------------------#
# data processing#
'foreign',  # .dbf (read.dbf, read.spss)#
'xlsx',  # .xlsx (read.xlsx)#
'gdata',  # .xls (read.xls)#
'scales',  # allows for $, %, etc.#
'lubridate',  # to allow easier parsing of dates#
#
#---------------------------------------------------------------------------------#
# data manipulation#
'magrittr',  # provides 'pipe'-like operator#
'plyr',  # splitting, applying and combining data#
'data.table',#
'dplyr',  # splitting, applying and combining data, replacing plyr#
'reshape2',  # alternative to reshape(); convert data between wide & long#
'tidyr',  # alternative to reshape2()#
'broom',  # installation: 'devtools); install_github('dgrtwo/broom')#
'abind',  # combines arrays#
#
#---------------------------------------------------------------------------------#
# statistical methods#
#
# math#
'expm',  # matrix exponential#
'Matrix',  # matrix#
#
# plot#
'corrplot',  # correlation plot#
'ROCR',  # # ROCR plot#
#
# methods#
'lasso2',  # the lasso#
'leaps',  # function to find the regression subset#
'class',  # classification#
'boot',  # cross-validation and bootstrap#
'pls',  # PRC#
'glmnet',  # the lasso or elastic-net regularization path#
# 'spline',  # splines#
'gam',  # generalized additive models#
'tree',  # trees#
'randomForest',  # bagging + random forest#
'gbm',  # boosting#
'e1071',  # SVM#
'np',  # kernel smoothing / non-parametric regression#
'PSCBS',  # circular binary segmentation, install the following before#
# source("http://bioconductor.org/biocLite.R")#
# biocLite("DNAcopy")#
'nlme',  # generalized least square'#
'bcp',  # bayesian changepoint model#
#
# distributions#
'evd',  # extreme value distribution#
'mnormt',  # multivariate t-distribution#
'truncnorm',  # truncated normal distribution#
'VGAM',  # Rayleigh distribution#
#
# time series#
'astsa',  # applied statistical time series analysis#
'forecast',  # forecasting functions for time series & linear models#
#
# bayesian#
'bayesm',  # by Peter Rossi, from 'Bayesian Statistics and Marketing'#
'MCMCpack',  # a variant#
#
# h2o#
'h2o',#
#
#---------------------------------------------------------------------------------#
# graphics#
#
# framework#
'ggplot2',  # ggplot2.org/book#
'ggsubplot',  # facilitate embedded plots through ggplot2#
'ggvis',  # web-interactive graphics, used with shiny: ggvis.rstudio.com#
'shiny',  # web-application framework for R: shiny.rstudio.com#
'gridExtra',  # plot multiple ggplot2 plots in a grid#
#
# specific plots#
'gplots',  # a variant#
'igraph',  # network#
'rgl',  # 3D graphics#
'vcd',  # mosaic#
#
# fonts#
'extrafont',#
# load fonts: loadfonts()#
# import all fonts: font_import()#
# list all the fonts: fonts()#
#
#---------------------------------------------------------------------------------#
# string manipulation#
'stringr', #
#
#---------------------------------------------------------------------------------#
# GIS#
'maptools',  # reading and handling spatial objects#
#
#---------------------------------------------------------------------------------#
# markdown#
# 'pandoc#
'knitr', #
'rmarkdown',  # rmarkdown.rstudio.com#
#
#---------------------------------------------------------------------------------#
# SQL#
'DBI',#
'RMySQL',#
#
#---------------------------------------------------------------------------------#
# package development#
'devtools',#
'roxygen2'#
#
  )#
)#
#
#================================================================================= #
# - installs all of above in R#
#=================================================================================#
#
for (i in 1:length(packagesList)) {#
    if (!(packagesList[i] %in% rownames(installed.packages()))) { #
        install.packages(packagesList[i]) #
    }#
}
quite
quit
?str_split_fixed()
werasdf
asdf
sadf
asd
f
asdf
d
fa
sdf
a
sdf
as
f
asd
f
asdf
library('stringr')
?str_split_fixed()
library('stringr')
fruits <- c(#
  "apples and oranges and pears and bananas",#
  "pineapples and mangos and guavas"#
)#
str_split_fixed(fruits, " and ", 3)#
str_split_fixed(fruits, " and ", 4)
fruits <- c(#
  "apples and oranges and pears and bananas",#
  "pineapples and mangos and guavas"#
)#
str_split(fruits, " and ", 3)#
str_split(fruits, " and ", 4)
fruits <- c(#
  "apples and oranges and pears and bananas",#
  "pineapples and mangos and guavas"#
)#
str_split(fruits, " and ")#
str_split(fruits, " and ")
260*.74
260*.74/1164
(260*.74 - 10)/1164
(260*.74 - 50)/1164
110/(1.0875^3)
81*1.0875
81*1.0875^2
81*1.1^2
81*1.15^2
update.packages('ggplot2')
#=================================================================================#
# preloads essential libraries to the current directory#
#=================================================================================#
#
library(MASS)  # standard statistical package
library(scales)  # allows for $, %, etc.
library(readr)  # alternative ways to load data
install.packages(readr)
install.packages('readr')
install.packages('tidry')
install.packages('tidyr')
install.packages('dplyr')
install.packages('ggplot2')
install.packages('stringr')
install.packages('caret')
if (nchar(Sys.getenv('SPARK_HOME')) < 1) {#
  Sys.setenv(SPARK_HOME = '/Users/steven/spark-1.6.0')#
}#
library(SparkR, lib.loc = c(file.path(Sys.getenv('SPARK_HOME'), 'R', 'lib')))
sc <- sparkR.init(master = 'local')
sqlContext <- sparkRSQL.init(sc)
DF <- createDataFrame(sqlContext, faithful)
head(DF)
if (nchar(Sys.getenv('SPARK_HOME')) < 1) {#
  Sys.setenv(SPARK_HOME = '/Users/steven/spark-1.6.0')#
}#
library(SparkR, lib.loc = c(file.path(Sys.getenv('SPARK_HOME'), 'R', 'lib')))#
#
# create Spark context#
sc <- sparkR.init(master = 'local')#
# create Spark's SQL DataFrames context#
sqlContext <- sparkRSQL.init(sc)
if (nchar(Sys.getenv('SPARK_HOME')) < 1) {#
  Sys.setenv(SPARK_HOME = '/Users/steven/spark-1.6.0')#
}#
library(SparkR, lib.loc = c(file.path(Sys.getenv('SPARK_HOME'), 'R', 'lib')))
c(file.path(Sys.getenv('SPARK_HOME'), 'R', 'lib'))
if (nchar(Sys.getenv('SPARK_HOME')) < 1) {#
  Sys.setenv(SPARK_HOME = '/Users/steven/spark-1.6.0-bin-without-hadoop')#
}#
library(SparkR, lib.loc = c(file.path(Sys.getenv('SPARK_HOME'), 'R', 'lib')))
Sys.setenv(SPARK_HOME = '/Users/steven/spark-1.6.0-bin-without-hadoop')
library(SparkR, lib.loc = c(file.path(Sys.getenv('SPARK_HOME'), 'R', 'lib')))
sc <- sparkR.init(master = 'local')
Sys.setenv(SPARK_HOME = '/Users/steven/spark-1.6.0')
library(SparkR, lib.loc = c(file.path(Sys.getenv('SPARK_HOME'), 'R', 'lib')))
sc <- sparkR.init(master = 'local')
Sys.setenv(SPARK_HOME = '/Users/steven/spark-1.6.0-bin-without-hadoop')
library(SparkR, lib.loc = c(file.path(Sys.getenv('SPARK_HOME'), 'R', 'lib')))
sc <- sparkR.init(master = 'local')
Sys.setenv(SPARK_HOME = '/Users/steven/spark-1.6.0-bin-hadoop2.6')
library(SparkR, lib.loc = c(file.path(Sys.getenv('SPARK_HOME'), 'R', 'lib')))
SPARK_HOME
Sys.getenv('SPARK_HOME')
if (nchar(Sys.getenv('SPARK_HOME')) < 1) {#
  Sys.setenv(SPARK_HOME = '/Users/steven/spark-1.6.0-bin-hadoop2.6')#
}
library(SparkR, lib.loc = c(file.path(Sys.getenv('SPARK_HOME'), 'R', 'lib')))
sc <- sparkR.init(master = 'local')
sqlContext <- sparkRSQL.init(sc)
DF <- createDataFrame(sqlContext, faithful)
head(DF)
installed.packages()
library(roxygen)
library(roxygen2)
install.packages('roxygen2')
if (nchar(Sys.getenv('SPARK_HOME')) < 1) {#
  Sys.setenv(SPARK_HOME = '/Users/steven/spark-1.6.0-bin-hadoop2.6')#
}#
library(SparkR, lib.loc = c(file.path(Sys.getenv('SPARK_HOME'), 'R', 'lib')))
sc <- sparkR.init(master = 'local')
sqlContext <- sparkRSQL.init(sc)
DF <- createDataFrame(sqlContext, faithful)
head(DF)
if (nchar(Sys.getenv('SPARK_HOME')) < 1) {#
  Sys.setenv(SPARK_HOME = '/Users/steven/spark-1.6.0-bin-hadoop2.6')#
}#
library(SparkR, lib.loc = c(file.path(Sys.getenv('SPARK_HOME'), 'R', 'lib')))
sc <- sparkR.init(master = 'local')
sqlContext <- sparkRSQL.init(sc)
DF <- createDataFrame(sqlContext, faithful)
head(DF)
N <- 1e6#
k <- 1e4#
df <- data.frame(V_int = sample(N, N, replace = T), #
                 V_num_1 = sample(N, N, replace = T) + 0.1,#
                 V_num_2 = sample(N, N, replace = T) + 0.2, #
                 V_char_1 = rep(paste0('factor_1_', 1:k), each = N/k),#
                 V_char_2 = rep(paste0('factor_2_', 1:k), each = N/k)#
                 )#
format(object.size(df), 'Mb')
?sample
detach(SparkR)
detach('SparkR')
detach('package:SparkR')
N <- 1e6#
k <- 1e4#
df <- data.frame(V_int = sample(N, N, replace = T), #
                 V_num_1 = sample(N, N, replace = T) + 0.1,#
                 V_num_2 = sample(N, N, replace = T) + 0.2, #
                 V_char_1 = rep(paste0('factor_1_', 1:k), each = N/k),#
                 V_char_2 = rep(paste0('factor_2_', 1:k), each = N/k)#
                 )#
format(object.size(df), 'Mb')
getwd()
write.table(df, 'test_spark.csv', sep = ',', row.names = F, col.names = F)
?read.df
?sparkR.init()
?h2o.init
if ("package:h2o" %in% search()) { detach("package:h2o", unload = TRUE) }
search()
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
install.packages("h2o", #
                 repos = (c("http://s3.amazonaws.com/h2o-release/h2o/master/1497/R", #
                 getOption("repos"))))#
library(h2o)
?h2o.init
localH2O <- h2o.init(ip = 'localhost')
h2o.shutdown()
h2o.init(nthreads = -1)
h2o.shutdown(localH2O)
h2o.shutdown()
# The following two commands remove any previously installed H2O packages for R.#
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }#
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }#
#
# Next, we download packages that H2O depends on.#
pkgs <- c("methods","statmod","stats","graphics","RCurl","jsonlite","tools","utils")#
for (pkg in pkgs) {#
    if (! (pkg %in% rownames(installed.packages()))) { install.packages(pkg) }#
}#
#
# Now we download, install and initialize the H2O package for R.#
install.packages("h2o", type="source", repos=(c("http://h2o-release.s3.amazonaws.com/h2o/rel-tukey/4/R")))#
library(h2o)
library(h2o)
#---------------------------------------------------------------------------------#
# The following two commands remove any previously installed H2O packages for R.#
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }#
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }#
#
# Next, we download packages that H2O depends on.#
pkgs <- c("methods","statmod","stats","graphics","RCurl","jsonlite","tools","utils")#
for (pkg in pkgs) {#
    if (! (pkg %in% rownames(installed.packages()))) { install.packages(pkg) }#
}#
#
# Now we download, install and initialize the H2O package for R.#
install.packages("h2o", type="source", repos=(c("http://h2o-release.s3.amazonaws.com/h2o/rel-tukey/4/R")))#
library(h2o)
localH2O <- h2o.init()
h2o.shutdown(localH2O)
h2o.shutdown()
localH2O
localH2O <- h2o.init(nthreads = -1)
localH2O
h2o.clusterInfo(localH2O)
h2o.shutdown()
if(!require(installr)) {#
install.packages("installr"); require(installr)}
updateR()
d = 1
library(dplyr)
seq(99, 301)
?seq
seq(99, 301, 2)
seq(100, 300, 2)
sum(seq(100, 300, 2))
ls()
a <- rnrom(10)
a <- dnrom(10)
?dnorm
a <- stats::dnrom(10)
?rnorm
rnorm(20)
a <- rnorm(20)
a
plot(a)
install.packages('rmarkdown')
setwd('/Users/steven/Documents/Data/Notes/R/rmarkdown-examples')
rmarkdown::render('R_rmarkdown_ioslides.Rmd')
rmarkdown::render('R_rmarkdown_ioslides.Rmd')
devtools::install_github("rstudio/rmarkdown")
rmarkdown::render('R_rmarkdown_ioslides.Rmd')
library(rmarkdown)
render('R_rmarkdown_ioslides.Rmd')
render('R_rmarkdown_ioslides.Rmd')
install.packages('tufte')
draft("R_rmarkdown.Rmd", template = "tufte_handout", package = "tufte")
library('tufte')
draft("R_rmarkdown.Rmd", template = "tufte_handout", package = "tufte")
draft("R_rmarkdown.Rmd")
draft("R_rmarkdown.Rmd", template = "tufte_handout")
draft("R_rmarkdown_tufte.Rmd", template = "tufte_handout")
run("R_rmarkdown_tufte.Rmd")
remder("R_rmarkdown_tufte.Rmd")
render("R_rmarkdown_tufte.Rmd")
render("R_rmarkdown_tufte.Rmd")
